Pulsar is a multi-tenant, high-performance solution for server-to-server messaging. Pulsar was originally developed by Yahoo, it is under the stewardship of the Apache Software Foundation.
Key features of Pulsar are listed below:
Native support for multiple clusters in a Pulsar instance, with seamless geo-replication of messages across clusters.
Very low publish and end-to-end latency.
Seamless scalability to over a million topics.
A simple client API with bindings for Java, Go, Python and C++.
Multiple subscription modes (exclusive, shared, and failover) for topics.
Guaranteed message delivery with persistent message storage provided by Apache BookKeeper.
A serverless light-weight computing framework Pulsar Functions offers the capability for stream-native data processing.
A serverless connector framework Pulsar IO, which is built on Pulsar Functions, makes it easier to move data in and out of Apache Pulsar.
Tiered Storage offloads data from hot/warm storage to cold/longterm storage (such as S3 and GCS) when the data is aging out.
Pulsar Functions increase developer productivity, provide easier troubleshooting and operational simplicity because there is no need for an external processing system.
Pulsar is built on the publish-subscribe pattern (often abbreviated to pub-sub). In this pattern, producers publish messages to topics; consumers subscribe to those topics, process incoming messages, and send acknowledgements to the broker when processing is finished.
Messages are the basic "unit" of Pulsar. The following table lists the components of messages.
Value / data payload	The data carried by the message. All Pulsar messages contain raw bytes, although message data can also conform to data schemas.
Key	Messages are optionally tagged with keys, which is useful for things like topic compaction.
Properties	An optional key/value map of user-defined properties.
Producer name	The name of the producer who produces the message. If you do not specify a producer name, the default name is used.
Sequence ID	Each Pulsar message belongs to an ordered sequence on its topic. The sequence ID of the message is its order in that sequence.
Publish time	The timestamp of when the message is published. The timestamp is automatically applied by the producer.
Event time	An optional timestamp attached to a message by applications. For example, applications attach a timestamp on when the message is processed. If nothing is set to event time, the value is 0.
TypedMessageBuilder	It is used to construct a message. You can set message properties such as the message key, message value with TypedMessageBuilder.
When you set TypedMessageBuilder, set the key as a string. If you set the key as other types, for example, an AVRO object, the key is sent as bytes, and it is difficult to get the AVRO object back on the consumer.
The default size of a message is 5 MB. You can configure the max size of a message with the following configurations.